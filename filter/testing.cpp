#include <iostream>
#include <cmath>
#include <cstring>
#include <iomanip>
#include <cstdlib>

using namespace std;

const int SIZE = 20;
const int RGB = 3;

void convolve(unsigned char out[][SIZE][RGB], unsigned char in[][SIZE][RGB], 
int N, double kernel[][11]);

int main(int argc, char* argv[]){
	unsigned char in[SIZE][SIZE][RGB] = 
	{
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	{{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1},{1,1,1}},
	};
	unsigned char out[SIZE][SIZE][RGB];
	int N = 3;
	double kernel[11][11];
	for (int i = 0; i < N; i++){
		for(int j = 0; j < N; j++){
			kernel[i][j] = 0;
		}
	}
	kernel[1][1] = 2;
	kernel[0][0] = 1;
	kernel[2][2] = 1;

	convolve(out , in , N , kernel);
	cout << endl;
	for(int i=0 ; i<SIZE ; i++){
		for(int j=0 ; j<SIZE ; j++){
			for(int k=0 ; k< RGB ; k++){
				cout << out[i][j][k]+0;
			}
			cout << " ";
		}
		cout << endl;
	}

}

void convolve(unsigned char out[][SIZE][RGB], unsigned char in[][SIZE][RGB], 
int N, double kernel[][11]){

	int padded[SIZE+11][SIZE+11][RGB];  // Use for input image with appropriate 
							   			// padding
	int temp[SIZE][SIZE][RGB];          // Use for the unclamped output pixel 
							   			// values then copy from temp to out, 
							   			// applying clamping 

	//first set all of padded to 0 (black)
	for(int i=0 ; i<SIZE+11 ; i++){
		for(int j=0 ; j<SIZE+11 ; j++){
			for(int k=0 ; k<RGB ; k++){
				padded[i][j][k] = 0;
			}
		}
	}	

	//now copy input into padding to appropriate locations
	for(int i=0 ; i<SIZE ; i++){
		for(int j=0 ; j<SIZE ; j++){
			for(int k=0 ; k<RGB ; k++){
				padded[i+1][j+1][k] = in[i][j][k];
			}
		}
	}

	//initialize temp pixels to 0 (black)
	for(int i=0 ; i<SIZE ; i++){
		for(int j=0 ; j<SIZE ; j++){
			for(int k=0 ; k<RGB ; k++){
				temp[i][j][k] = 0;
			}
		}
	}


	//now perform convolve (using convolution equation on each pixel of the 
	// actual image) placing the results in temp (i.e. unclamped result)
	double av;
	for(int i=0 ; i<SIZE ; i++){
		for(int j=0 ; j<SIZE ; j++){
			for(int k=0 ; k<RGB ; k++){
				av = 0;
				for(int m=0 ; m<N ; m++){
					for(int n=0 ; n<N ; n++){
						av += kernel[m][n] * padded[i+m][j+n][k];
					}
				}
				av /= N;
				temp[i][j][k] = av;
			}
		}
	}



	//now clamp and copy to output
	// You may need to cast to avoid warnings from the compiler:
	// (i.e. out[i][j][k] = (unsigned char) temp[i][j][k];)
	for(int i=0 ; i<SIZE ; i++){
		for(int j=0 ; j<SIZE ; j++){
			for(int k=0 ; k<RGB ; k++){
				if(temp[i][j][k] > 255){
					temp[i][j][k] = 255;
				}
			}
		}
	}

	for(int i=0 ; i<SIZE ; i++){
		for(int j=0 ; j<SIZE ; j++){
			for(int k=0 ; k<RGB ; k++){
				out[i][j][k] = (unsigned char) temp[i][j][k];
			}
		}
	}



}